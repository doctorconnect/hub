-----------Document--------------
@using KMTDataAccess
@model KMTBusinessEntities.UploadDocument
@{
    List<KMTBusinessEntities.posts> CommentList = new KMTDataAccess.DirectoryDataAccess().GetCommentListOnPost("DOC");
    List<KMTBusinessEntities.posts> LikeList = new KMTDataAccess.DirectoryDataAccess().GetLikeCount("DOC");
    int RoleId = Convert.ToInt32(HttpContext.Current.Session["RoleId"]);
}
<div align="right"><a href="@Url.Action("KnowledgeTree", "KnowledgeTree")" class="btn btn-group-vertical btn-sm">Knowledge Tree</a></div>
@if (RoleId != Convert.ToInt32(RoleType.User))
{
    <div class="grey-border">

        <div class="textarea-post">
            <div>
                <label> Title <b class="text-danger">*</b></label>
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", name = "title", id = "txtTitle", @placeholder = "Please Enter Title .." } })
                <small id="errorTitleId" style="display: none; color: red">Please Enter Title </small>
            </div><br />
            <div>
                <label> Category <b class="text-danger">*</b></label>
                @Html.DropDownListFor(model => model.Category, (IEnumerable<SelectListItem>)ViewBag.DocList, "-Select File Category-", new { @class = "form-control  ddlValidation", id = "ddlCAT" })
                <small id="errorCategoryId" style="display: none; color: red">Please Select Category </small>
            </div>
            <br />
            <div>
                <label> Relevant Tags <b class="text-danger">*</b></label>
                @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @class = "form-control", name = "message", id = "filemessage", @placeholder = "Add Relevant Tags... .." } })
                <small id="errorTagsId" style="display: none; color: red">Please Enter Relevant Tags.</small>
            </div>
            <br />
            <div style="position:relative;">
                <a class='btn btn-primary' href='javascript:;'>
                    Choose File <span class="glyphicon glyphicon-upload"></span>
                    <input type="file" name="fileUpload" class="clsfileUpload" id="DocUpload" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;' size="40" onchange='$("#upload-file-info").html($(this).val());'>
                </a>
                <span class='label label-info' id="upload-file-info"></span>
                <div class="col-sm-12">
                    <span id="errorBannerSpan" style="display: none; color: red">Please Select Document .</span>
                    <span id="errorBannerLength" style="display: none; color: red">File size should not be more than 5 MB.</span>
                    <span id="errorBannerExtension" style="display: none; color: red">Please upload only ['jpeg', 'jpg', 'png', 'doc', 'docx', 'xls', 'xlsx', 'pdf'] extension image.</span>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6 post-btn text-right">
                    <button type="submit" name="submit" class="btn btn-success btn-sm btnSubmit" disabled id="btnSave">Upload</button>
                </div>
            </div>

        </div>
        <!-- end textarea post -->
    </div>
}
@if (ViewBag.UpladDocBlogList_detail != null)
{
    foreach (var item in (ViewBag.UpladDocBlogList_detail as ICollection<KMTBusinessEntities.UploadDocument>).Where(m => m.Status == 1))
    {
        <div class="grey-border">
            <div class="media">
                <div class="media-body">
                    <div class='row'>
                        <div class='col-sm-6'>
                            <h4 class="media-heading" style="color:coral">
                                @item.Title
                            </h4>
                        </div>
                        <div class='col-sm-6 text-right'><button class="btn btn-success" onclick="window.location.href='/Admin/DownLoadDoc?key= @item.ID'"> <i class='fa fa-download'></i> Download </button></div>
                    </div>
                    @*<h4 class="media-heading" style="color:coral">  @item.Title  </h4>*@
                    <hr />
                    <h4 class="media-heading"> Category:  @item.Category </h4>
                    @*<div><button class="btn btn-success" onclick="window.location.href='/Admin/DownLoadDoc?key= @item.ID'"> <i class="fa fa-download"></i> </button></div>*@

                    <h4 class="media-heading" align="right">
                        <a href="/User/UserProfile?Usercode=@item.UserCode"> @item.UploadByName</a>
                        <time class="timeago"><small>@item.UploadDate</small></time>
                    </h4>
                </div>
            </div>
            @if (CommentList.Where(l => l.PostId == item.ID).Count() > 0)
            {
                <hr />
            }
            <div class="actions-icon">
                <ul>
                    <li> <button class="btn btn-default" title="Like Document" id="@item.ID&Identifier=DOC" onclick="LoadDocLike(this);"> <i class="fa fa-thumbs-o-up"></i> </button> @LikeList.Where(l => l.PostId == item.ID).Count()</li>
                    <li><button class="btn btn-default" title="Comment on  Document" onclick="showhideDoc(@item.ID);"> <i class="fa fa-commenting"></i> </button>  @CommentList.Where(l => l.PostId == item.ID).Count()</li>
                    @*     <li><button class="btn btn-default" title="Download Document" onclick="window.location.href='/Admin/DownLoadDoc?key=@item.ID'"> <i class="fa fa-download"></i> </button></li>*@
                    @if (RoleId == Convert.ToInt32(RoleType.Admin))
                    {
                        <li><button class="btn btn-default" title="Delete  Document" onclick="DeleteDoc(@item.ID)"> <i class="fa fa-trash-o"></i> </button></li>
                        @*<li><button class="btn btn-default" title="Delete Document" onclick="window.location.href='/Admin/DeletePost?key=@item.ID&Identifier=DOC'"> <i class="fa fa-trash-o"></i> </button></li>*@
                    }
                </ul>
            </div>
            <div style="display:none;margin-top:10px;" id="D_@item.ID" class="publishComment">
                @foreach (var cmt in CommentList.Where(l => l.PostId == item.ID))
                {
                    <div class="media" style="align-content:center">
                        <ul>
                            <div class="media-left media-top">
                                <img src="../images/avatar2.png" alt="" class="media-object img-circle" style="width:40px">
                            </div>
                            <div class="media-body">
                                <h4 class="media-heading">
                                    @cmt.CommentedByName
                                    <small>@cmt.CommentedDate</small>
                                </h4>
                                <p>@cmt.Message</p>
                            </div>
                        </ul>
                    </div>
                }
                <hr />

                <div class="input-group input-group-sm " id="@item.ID">
                    <input type="hidden" class="PostId" value="@item.ID" />
                    <input type="text" name="txtvale" id="txt_@item.ID" class="form-control txtcomment" placeholder="write a comment..." />
                    <div class="input-group-btn"><button id="@item.ID" onclick="PostComment(this);" class="btn btn-primary postComment">Comment</button></div>
                </div>

            </div>
        </div>
    }
}

<script src="~/CustomScripts/DocumentUpload.js"></script>
<script type="text/javascript">
    function showhideDoc(id) {
        var e = document.getElementById('D_' + id);
        e.style.display = (e.style.display == 'block') ? 'none' : 'block';
    }

    function LoadDocLike(Id) {
        $.ajax
            ({
                url: "Admin/PostLikes?key=" + Id.id,
                contentType: "application/html; charset=utf-8",
                type: "POST",
                datatype: "html",
                success: function (t) {
                    $("#dvHomeDocumentBind").html(t)
                },
                error: function () {
                    $("#dvHomeDocumentBind").html("Document Not Found");
                    window.location.href = "/Home/Error";
                }
            });
    }

    function PostComment(Pid) {
        var controlName = Pid.id;
        var Comment = $("#txt_" + controlName + "").val();
        if (Comment != null) {
            $.ajax({
                type: "POST",
                url: "/Home/SaveComment?Identifier=DOC&txtcomment=" + Comment + "&PostId=" + Pid.id,
                contentType: "application/html; charset=utf-8",
                datatype: "html",
                success: function (t) {
                    $("#dvHomeDocumentBind").html(t)
                },
                error: function () {
                    $("#dvHomeDocumentBind").html("Document Not Found");
                    window.location.href = "/Home/Error";
                }
            });
        }
    }

    function DeleteDoc(key) {
        $.confirm({
            title: '',
            type: 'red',
            content: '<p style="font-style:italic;">Are you sure, want to Delete document ?</p>',
            buttons: {
                confirm: function () {
                    $.ajax({
                        url: "/Admin/DeletePost?keyId=" + key + "&Identifier=DOC",
                        method: 'post',
                        datatype: "html",
                        success: function (t) {
                            $("#dvHomeDocumentBind").html(t)
                        },
                        error: function () {
                            $("#dvHomeDocumentBind").html("Document Not Found");
                            window.location.href = "/Home/Error";
                        }
                    });
                },
                cancel: function () {
                }
            }
        });
    }

    $('.clsfileUpload').bind('change', function () {
        $('#errorBannerLength').hide();
        var fileExt = $('.clsfileUpload').val().split('.').pop().toLowerCase();
        if ($.inArray(fileExt, ['jpeg', 'jpg', 'png', 'doc', 'docx', 'xls', 'xlsx', 'pdf']) === -1) {
            $('#errorBannerExtension').show();
            $('#errorBannerSpan').hide();
            $('.btnSubmit').prop("disabled", true);
            return false;
        }
        else {
            $('.btnSubmit').prop("disabled", false);
            $('#errorBannerExtension').hide();
        }

        if (this.files[0].size / (1024 * 1024) > 5) {
            $('#errorBannerLength').show();
            $('#errorBannerSpan').hide();
            $('.btnSubmit').prop("disabled", true);
            return false;
        }
        else {
            $('.btnSubmit').prop("disabled", false);
        }
    });

    $(document).ready(function () {
        $('.btnSubmit').click(function () {
            // Checking whether FormData is available in browser
            var Title = $('#txtTitle').val().trim().length;
            var filemessage = $('#filemessage').val().trim().length;
            var UploadF = $("#DocUpload").get(0);
            var CatId = parseInt($('#ddlCAT').val()) || 0;
            if (!Title > 0) { $('#errorTitleId').show(); return false;}
            else { $('#errorTitleId').hide(); }
            if (CatId == 0) { $('#errorCategoryId').show(); return false; }
            else { $('#errorCategoryId').hide(); }
            if (!filemessage > 0) { $('#errorTagsId').show(); return false; }
            else { $('#errorTagsId').hide(); }
            if (UploadF.files[0] == null) { $('#errorBannerSpan').show(); return false; }
            else { $('#errorBannerSpan').hide(); }

            if (window.FormData !== undefined) {
                var fileUpload = $("#DocUpload").get(0);
              //  var files = fileUpload.files[0];
                // Create FormData object
                var fileData = new FormData();
                fileData.append("Title", $("#txtTitle").val());
                fileData.append("Category", $("#ddlCAT").val());
                fileData.append("Message", $("#filemessage").val());
                // Looping over all files and add it to FormData object
                fileData.append("fileUpload", fileUpload.files[0]);

                $.ajax({
                    url: "/Admin/UploadDoc",
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                        $("#dvHomeDocumentBind").html(result)
                       // alert("Your File Upload successful. You’ll receive a confirmation email once the Approval has been granted By Admin.");
                        //$('#txtTitle').val('');
                        //$('#ddlCAT').val('');
                        //$('#filemessage').val('');
                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                });
            } else {
                alert("FormData is not supported.");
            }
        });

        var success = '@TempData["success"]';
        if (success != null && success != undefined && success != '')
            toasterSuccessMessage(success);
        function toasterSuccessMessage(message) {
            new PNotify({
                title: 'Success',
                text: message,
                type: 'success',
                styling: 'bootstrap3'
            });
        }
    });
</script>



-------------------------search.csh------------------------

@using (Html.BeginForm("SearchResult", "User", FormMethod.Post, new { @class = "navbar-form" }))
{
    <div class="input-group">
        @*@Html.TextBoxFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Search" } })*@
        <input type="text" id="UserName" name="UserName" class="form-control" placeholder="Search" />
        <div class="input-group-btn">
            <button id="btnSubmit" class="btn btn-default" type="submit">
                <i class="glyphicon glyphicon-search"></i>
            </button>
        </div>
    </div>
}

<script type="text/javascript">
    $(document).ready(function (Livesearch) {
        $("#UserName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Home/Index",
                    type: "POST",
                    global: false,
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.UserName, value: item.UserName };
                        }))
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        window.location.href = "/Home/Error";
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            }
        });
    })
</script>
<script type="text/javascript">
    $(function () {
        $("#btnSubmi").click(function () {
            var formData = new FormData();
            formData.append("UserName", $("#UserName").val());
            $.ajax({
                url: "/User/SearchResult",
                type: 'POST',
                cache: false,
                contentType: false,
                processData: false,
                data: formData
            });
        });
    });
</script>


-------------------FAQ.csht------------------
@model KMTBusinessEntities.FaqModel
@{
    ViewBag.Title = "FAQ";
    List<KMTBusinessEntities.FaqModel> faqlist = new KMTDataAccess.DirectoryDataAccess().GetFaqList();
}
<div class="panel panel-success">
    <div class="panel-heading"><h2>Frequently Asked Questions</h2></div>
    <br />
    <div class="form-group" style="display: inline; margin-right: 10px;" align="right">
        <div class="input-group" style="width: 50%;">
            <input type="text" class="form-control" placeholder="FAQ Search Here.." name="Name" id="Search">
            <div class="input-group-btn">
                @*<button class="btn btn-default" type="submit" id="btnSearch">
                        <i class="glyphicon glyphicon-search"></i>
                    </button>*@
            </div>
        </div>
        <br />
    </div>

    @foreach (var cmt in faqlist.Where(f => f.IsActive == true))
    {
        <div class="media" style="align-content:center">
            <ul>
                <div class="grey-border Search">
                    <div class="media-body ">
                        <a data-toggle="collapse" href="#collapseTitleName_@cmt.Id" aria-expanded="false" aria-controls="collapseExample">
                            @cmt.FaqQuestion
                        </a>
                        @*<h4 class="media-heading">
                                @cmt.FaqQuestion
                            </h4>*@
                        <div class="collapse" id="collapseTitleName_@cmt.Id">
                            @cmt.FaqAnswer
                        </div>
                        @*<small>@cmt.FaqAnswer</small>*@
                    </div>

                </div>
            </ul>
        </div>
    }
</div>
    <script>
        $(document).ready(function () {
            function Contains(text_one, Tex_two) {
                if (text_one.indexOf(Tex_two) != -1)
                    return true;
            }
            $("#Search").keyup(function () {
                var searchtext = $("#Search").val().toLowerCase();
                $(".Search").each(function () {
                    if (!Contains($(this).text().toLowerCase(), searchtext)) {
                        $(this).hide();
                    }
                    else {
                        $(this).show();
                    }

                });
            });
        });
    </script>
    
    
    
------------------------knowledgetreecontroller----------------------
using KMTBusinessEntities;
using KMTDataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace KMT.Controllers
{
    public class KnowledgeTreeController : Controller
    {
        private DirectoryDataAccess objDirectoryDataAccess;

        public KnowledgeTreeController()
        {
            objDirectoryDataAccess = new DirectoryDataAccess();
        }

        public ActionResult KnowledgeTree()
        {
            string categories = Request.QueryString["categories"];
            string doctypes = Request.QueryString["doctypes"];
            string lobs = Request.QueryString["lobs"];
            List<KnowledgeTreemModel> listOfKnowledgeTreemModel = new List<KnowledgeTreemModel>();
            IEnumerable<KnowledgeTreemModel> listOfKtdata = new List<KnowledgeTreemModel>();
            listOfKnowledgeTreemModel = objDirectoryDataAccess.GetKnowledgeTree();
            ViewBag.listOfKnowledgeTreemModel = listOfKnowledgeTreemModel;
            listOfKtdata = listOfKnowledgeTreemModel;
            if (!string.IsNullOrEmpty(categories))
            {
                List<KnowledgeTreemModel> listOfSelectcategories = new List<KnowledgeTreemModel>();
                List<string> checkedcategories = categories.Split(',').ToList();
                ViewBag.checkedcategories = checkedcategories;
                for (int i = 0; i < checkedcategories.Count(); i++)
                {
                    listOfSelectcategories.AddRange(listOfKtdata.Where(m => m.CATEGORYNAME == checkedcategories[i]));
                }
                listOfKtdata = listOfSelectcategories;
            }
            if (!string.IsNullOrEmpty(doctypes))
            {
                List<KnowledgeTreemModel> listOfKtdatadoctypes = new List<KnowledgeTreemModel>();
                List<string> checkeddoctypes = doctypes.Split(',').ToList();
                ViewBag.checkeddoctypes = checkeddoctypes;
                for (int j = 0; j < checkeddoctypes.Count(); j++)
                {
                    listOfKtdatadoctypes.AddRange(listOfKtdata.Where(m => m.DOCUTYPE == checkeddoctypes[j]));
                }
                listOfKtdata = listOfKtdatadoctypes;
            }
            if (!string.IsNullOrEmpty(lobs))
            {
                List<KnowledgeTreemModel> listOfKtdatalobs = new List<KnowledgeTreemModel>();
                List<string> checkedlobs = lobs.Split(',').ToList();
                ViewBag.checkedlobs = checkedlobs;
                for (int k = 0; k < checkedlobs.Count(); k++)
                {
                    listOfKtdatalobs.AddRange(listOfKtdata.Where(m => m.LOBName == checkedlobs[k]));
                }
                listOfKtdata = listOfKtdatalobs;
            }
            ViewBag.listOfKtdata = listOfKtdata;

            return View();
        }
    }
}

---------------------------QuizController---------------------
using KMTBusinessEntities;
using KMTBusinessEntities.viewModels;
using KMTDataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace KMT.Controllers
{
    public class QuizController : Controller
    {
        private DirectoryDataAccess objDirectoryDataAccess;

        public QuizController()
        {
            this.objDirectoryDataAccess = new DirectoryDataAccess();
        }

        public JsonResult GetQuiz()
        {
            return Json(objDirectoryDataAccess.GetQuiz(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult ManageQuiz()
        {
            string keyId = Request.QueryString["key"];

            if (!string.IsNullOrEmpty(keyId))
            {
                ViewBag.KeyId = keyId;
                var details = objDirectoryDataAccess.GetQuiz().Where(x => x.QuizID == Convert.ToInt32(keyId)).FirstOrDefault();
                return View(details);
            }

            return View();
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ManageQuiz(QuizVM model)
        {
            ModelState.Remove("QuizID");
            if (ModelState.IsValid)
            {
                int msg = 0;
                if (model.QuizID == 0)
                {
                    msg = objDirectoryDataAccess.SubmitQuiz(model);
                    if (msg > 0)
                    {
                        objDirectoryDataAccess.SendEmail(Convert.ToInt32(HttpContext.Session["RoleId"]), "KMT24");
                        TempData["success"] = "Quiz Added Successfully";
                    }
                    else
                        TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
                else
                {
                    msg = objDirectoryDataAccess.SubmitQuiz(model);
                    if (msg > 0)
                    {
                        objDirectoryDataAccess.SendEmail(Convert.ToInt32(HttpContext.Session["RoleId"]), "KMT25");
                        TempData["success"] = "Quiz Updated Successfully";
                    }
                    else
                        TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
            }

            ModelState.Clear();
            return RedirectToAction("ManageQuiz");
        }

        public JsonResult GetQuestion()
        {
            return Json(objDirectoryDataAccess.GetQuizQuestions(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult ManageQuestion()
        {
            QuizVM quiz = new KMTBusinessEntities.viewModels.QuizVM();
            List<SelectListItem> Quiz = new List<SelectListItem>();
            var QuizList = objDirectoryDataAccess.GetQuiz().Where(q => q.IsActive == true).Select(l => new { l.QuizID, l.QuizName });
            foreach (var item in QuizList)
            {
                Quiz.Add(new SelectListItem
                {
                    Text = item.QuizName,
                    Value = item.QuizID.ToString(),
                });
            }
            ViewBag.BSList = Quiz.ToList();
            string keyId = Request.QueryString["key"];
            if (!string.IsNullOrEmpty(keyId))
            {
                ViewBag.KeyId = keyId;
                var details = objDirectoryDataAccess.GetQuizQuestions().Where(x => x.QuestionID == Convert.ToInt32(keyId)).FirstOrDefault();
                string[] arr = details.ChoiceText.ToString().Split('/');
                string[] arrChoiceId = details.ChoicestringID.ToString().Trim().Split('/');
                if (arr.Length == 4)
                {
                    details.ChoiceID1 = arrChoiceId[0].Trim();
                    details.ChoiceID2 = arrChoiceId[1].Trim();
                    details.ChoiceID3 = arrChoiceId[2].Trim();
                    details.ChoiceID4 = arrChoiceId[3].Trim();
                    details.ChoiceText2 = arr[1];
                    details.ChoiceText3 = arr[2].Replace("!X", "");
                    details.ChoiceText4 = arr[3].Replace("!X", "");
                    details.ChoiceText1 = arr[0];
                    details.ChoiceText2 = arr[1];
                    details.ChoiceText3 = arr[2].Replace("!X", "");
                    details.ChoiceText4 = arr[3].Replace("!X", "");
                    if (arr[0].Trim() == details.AnswerText.Trim())
                    {
                        details.IsAnswer1 = true;
                    }
                    if (arr[1].Trim() == details.AnswerText.Trim())
                    {
                        details.IsAnswer2 = true;
                    }
                    if (arr[2].Trim() == details.AnswerText.Trim())
                    {
                        details.IsAnswer3 = true;
                    }
                    if (arr[3].Trim() == details.AnswerText.Trim())
                    {
                        details.IsAnswer4 = true;
                    }
                }
                if (arr.Length == 3)
                {
                    details.ChoiceID1 = arrChoiceId[0].Trim();
                    details.ChoiceID2 = arrChoiceId[1].Trim();
                    details.ChoiceID3 = arrChoiceId[2].Trim();
                    details.ChoiceText1 = arr[0];
                    details.ChoiceText2 = arr[1];
                    details.ChoiceText3 = arr[2];
                    if (arr[0].Trim() == details.AnswerText.Trim())
                    {
                        details.IsAnswer1 = true;
                    }
                    if (arr[1].Trim().ToString() == details.AnswerText.Trim().ToString())
                    {
                        details.IsAnswer2 = true;
                    }
                    if (arr[2].Trim() == details.AnswerText.Trim())
                    {
                        details.IsAnswer3 = true;
                    }
                }
                if (arr.Length == 2)
                {
                    details.ChoiceID1 = arrChoiceId[0].Trim();
                    details.ChoiceID2 = arrChoiceId[1].Trim();
                    details.ChoiceText1 = arr[0];
                    details.ChoiceText2 = arr[1];
                    if (arr[0].Trim() == details.AnswerText.Trim())
                    {
                        details.IsAnswer1 = true;
                    }
                    if (arr[1].Trim() == details.AnswerText.Trim())
                    {
                        details.IsAnswer2 = true;
                    }
                }
                return View(details);
            }
            return View();
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ManageQuestion(QuestionVM model)
        {
            ModelState.Remove("QuestionID");
            if (ModelState.IsValid)
            {
                if (model.IsAnswer1 == true)
                {
                    model.AnswerText = model.ChoiceText1;
                }
                if (model.IsAnswer2 == true)
                {
                    model.AnswerText = model.ChoiceText2;
                }
                if (model.IsAnswer3 == true)
                {
                    model.AnswerText = model.ChoiceText3;
                }
                if (model.IsAnswer4 == true)
                {
                    model.AnswerText = model.ChoiceText4;
                }
                int msg = 0;
                if (model.QuestionID == 0)
                {
                    msg = objDirectoryDataAccess.SubmitQuestion(model);
                    if (msg > 0)
                        TempData["success"] = "Question Added Successfully";
                    else
                        TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
                else
                {
                    msg = objDirectoryDataAccess.SubmitQuestion(model);
                    if (msg > 0)
                        TempData["success"] = "Question Updated Successfully";
                    else
                        TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
            }

            ModelState.Clear();
            return RedirectToAction("ManageQuestion");
        }

        public JsonResult GetAnswer()
        {
            return Json(objDirectoryDataAccess.GetQuizAnswer(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult ManageAnswer()
        {
            QuizVM quiz = new KMTBusinessEntities.viewModels.QuizVM();
            List<SelectListItem> Quiz = new List<SelectListItem>();
            var QuizList = objDirectoryDataAccess.GetQuiz().Select(l => new { l.QuizID, l.QuizName });
            foreach (var item in QuizList)
            {
                Quiz.Add(new SelectListItem
                {
                    Text = item.QuizName,
                    Value = item.QuizID.ToString(),
                });
            }
            ViewBag.BSList = Quiz.ToList();
            List<SelectListItem> Ques = new List<SelectListItem>();
            var QuesList = objDirectoryDataAccess.GetQuizQuestions().Select(l => new { l.QuestionID, l.QuestionText });
            foreach (var item in QuesList)
            {
                Ques.Add(new SelectListItem
                {
                    Text = item.QuestionText,
                    Value = item.QuestionID.ToString(),
                });
            }
            ViewBag.QuesList = Ques.ToList();
            string keyId = Request.QueryString["key"];
            if (!string.IsNullOrEmpty(keyId))
            {


                ViewBag.KeyId = keyId;
                var details = objDirectoryDataAccess.GetQuizAnswer().Where(x => x.AnswerID == Convert.ToInt32(keyId)).FirstOrDefault();
                return View(details);
            }
            return View();
        }

        [HttpPost]
        public ActionResult ManageAnswer(QuizAnswersVM model, int? QuizID)
        {
            ModelState.Remove("AnswerID");
            if (ModelState.IsValid)
            {
                int msg = 0;
                if (model.AnswerID == 0)
                {
                    msg = objDirectoryDataAccess.SubmitAnswer(model);
                    if (msg > 0)
                        TempData["success"] = "Answer Added Successfully";
                    else
                        TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
                else
                {
                    msg = objDirectoryDataAccess.SubmitAnswer(model);
                    if (msg > 0)
                        TempData["success"] = "Answer Updated Successfully";
                    else
                        TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
            }

            ModelState.Clear();
            return RedirectToAction("ManageAnswer");
        }

        public JsonResult GetQuizChoice()
        {
            return Json(objDirectoryDataAccess.GetQuizChoice(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult ManageQuizChoice()
        {
            QuizVM quiz = new KMTBusinessEntities.viewModels.QuizVM();
            List<SelectListItem> Ques = new List<SelectListItem>();
            var QuesList = objDirectoryDataAccess.GetQuizQuestions().Select(l => new { l.QuestionID, l.QuestionText });
            foreach (var item in QuesList)
            {
                Ques.Add(new SelectListItem
                {
                    Text = item.QuestionText,
                    Value = item.QuestionID.ToString(),
                });
            }
            ViewBag.QuesList = Ques.ToList();

            string keyId = Request.QueryString["key"];
            if (!string.IsNullOrEmpty(keyId))
            {
                ViewBag.KeyId = keyId;
                var details = objDirectoryDataAccess.GetQuizChoice().Where(x => x.ChoiceID == Convert.ToInt32(keyId)).FirstOrDefault();
                return View(details);
            }

            return View();
        }

        [HttpPost]
        public ActionResult ManageQuizChoice(ChoiceVM model)
        {
            ModelState.Remove("ChoiceID");
            if (ModelState.IsValid)
            {
                int msg = 0;
                if (model.ChoiceID == 0)
                {
                    if (model.IsAnswer == true)
                    {
                        msg = objDirectoryDataAccess.SubmitQuesAnswer(0, model.QuestionID, model.ChoiceText);
                        msg = objDirectoryDataAccess.SubmitChoice(model);
                    }
                    else
                    {
                        msg = objDirectoryDataAccess.SubmitChoice(model);
                    }

                    if (msg > 0)
                        TempData["success"] = "Choice Added Successfully";
                    else
                        TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
                else
                {
                    msg = objDirectoryDataAccess.SubmitChoice(model);
                    if (msg > 0)
                        TempData["success"] = "Choice Updated Successfully";
                    else
                        TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
            }

            ModelState.Clear();
            return RedirectToAction("ManageQuizChoice");
        }

        [HttpGet]
        public ActionResult SelectQuiz()
        {
            string userNTId = HttpContext.Session["UserNTID"].ToString();
            var userDetails = objDirectoryDataAccess.GetListOfRegisteredUser().Where(x => x.UserNTID == userNTId && x.IsActive == true).FirstOrDefault();
            if (userDetails.Status == Convert.ToInt32(StatusType.Approve))
            {
                ViewBag.UserName = userDetails.UserName;
                ViewBag.LOBName = userDetails.LOBName;
                ViewBag.BusinessSegment = userDetails.BusinessSegmentName;
                ViewBag.Base64String = "data:image/png;base64," + Convert.ToBase64String(userDetails.UserPhoto, 0, userDetails.UserPhoto.Length);
            }
            QuizVM quiz = new KMTBusinessEntities.viewModels.QuizVM();
            List<SelectListItem> Quiz = new List<SelectListItem>();
            var QuizList = objDirectoryDataAccess.GetQuiz().Select(l => new { l.QuizID, l.QuizName });
            foreach (var item in QuizList)
            {
                Quiz.Add(new SelectListItem
                {
                    Text = item.QuizName,
                    Value = item.QuizID.ToString(),
                });
            }
            quiz.ListOfQuiz = Quiz.ToList();

            return View(quiz);
        }

        [HttpGet]
        public ActionResult QuizTest(QuizVM quiz)
        {
            return View();
        }

        [HttpPost]
        public ActionResult QuizTest(List<QuizAnswersVM> resultQuiz)
        {
            List<QuizAnswersVM> finalResultQuiz = new List<QuizAnswersVM>();

            foreach (QuizAnswersVM answser in resultQuiz)
            {
                QuizAnswersVM result = objDirectoryDataAccess.GetQuizAnswer().Where(x => x.QuestionID == answser.QuestionID).Select(a => new QuizAnswersVM
                {
                    QuestionID = a.QuestionID,
                    AnswerQ = a.AnswerText,
                    isCorrect = (answser.AnswerQ.ToLower().Equals(a.AnswerText.ToLower()))
                }).FirstOrDefault();
                finalResultQuiz.Add(result);
            }
            return Json(new { result = finalResultQuiz }, JsonRequestBehavior.AllowGet);
        }
    }
}


--------------UserController------------------

using KMTBusinessEntities;
using KMTDataAccess;
using System;
using System.Data;
using System.Linq;
using System.Web.Mvc;

namespace KMT.Controllers
{
    public class UserController : Controller
    {
        private DirectoryDataAccess objDirectoryDataAccess;

        public UserController()
        {
            objDirectoryDataAccess = new DirectoryDataAccess();
        }

        [HttpGet]
        public ActionResult UserProfile(int Usercode)
        {

            string Userid = "00" + Usercode.ToString();
            var userDetails = objDirectoryDataAccess.GetListOfRegisteredUser().Where(x => x.UserCode == Userid).FirstOrDefault();
            ViewBag.Userid = userDetails.Id;
            ViewBag.UserCode = userDetails.UserCode;
            ViewBag.UserName = userDetails.UserName;
            Session["SerchUserName"] = userDetails.UserName;
            ViewBag.LOBName = userDetails.LOBName;
            ViewBag.AboutMe = userDetails.AboutMe;
            ViewBag.UserPhotoStatus = userDetails.ImgStatus;
            ViewBag.UserPhoto = "data:image/png;base64," + Convert.ToBase64String(userDetails.UserPhoto, 0, userDetails.UserPhoto.Length);
            var Follower = objDirectoryDataAccess.GetMyFollower(userDetails.Id.ToString());
            ViewBag.MyFollowing = Follower[0].FollowingBy;
            ViewBag.MyFollowers = Follower[0].FollowerBy;
            var Followstatus = objDirectoryDataAccess.GetStatusFollower(HttpContext.Session["ID"].ToString(), userDetails.Id.ToString());
            Session["status"] = Followstatus[0].CountFollower;
            Session["Serchid"] = userDetails.Id;
            Session["UserCode"] = userDetails.UserCode;
            Session["SerchUserNTID"] = userDetails.UserNTID;
            ViewBag.User_BlogList_detail = objDirectoryDataAccess.GetBlogList().Where(f => f.BlogerId.ToString() == userDetails.Id.ToString());

            return View();
        }

        public ActionResult PostLikes()
        {
            int msg = 0;
            int keyId = int.Parse(Request.QueryString["key"]);
            string Identifier = Request.QueryString["Identifier"];

            msg = objDirectoryDataAccess.SubmitLike(keyId, Identifier);

            if (msg > 0)
                TempData["Success"] = "" + Identifier + " Liked";
            else if (msg == 0)
                TempData["error"] = "Some Error Occured. Please Contact Admin";

            return RedirectToAction("UserProfile", "User", new { @Usercode = Session["UserCode"] });
        }

        public ActionResult FlagPost()
        {
            int msg = 0;
            string keyId = Request.QueryString["key"];
            string Id = Request.QueryString["Id"].PadLeft(9, '0');
            msg = objDirectoryDataAccess.PostFlag(int.Parse(keyId));
            if (msg > 0)
            {
                UserRegistrationModel model = objDirectoryDataAccess.GetListOfRegisteredUser().Where(x => x.UserCode == Id).FirstOrDefault();
                objDirectoryDataAccess.SendEmail(model, "KMT6");
                objDirectoryDataAccess.SendEmail(model, "KMT7");
                TempData["success"] = "Post Flagged";
            }
            else
            {
                TempData["error"] = "Some Error Occured. Please Contact Admin";
            }
            return RedirectToAction("UserProfile", "User", new { @Usercode = Session["UserCode"] });
        }

        [HttpPost]
        public ActionResult SaveComment(int PostId, string txtcomment, string Identifier)
        {
            int msg = 0;
            msg = objDirectoryDataAccess.SubmitCommentt(PostId, txtcomment, Identifier);
            if (msg > 0)
                TempData["Success"] = "Comment Posted On " + Identifier + " Successfully";
            else if (msg == 0)
                TempData["error"] = "Some Error Occured. Please Contact Admin";

            return RedirectToAction("UserProfile", "User", new { @Usercode = Session["UserCode"] });
        }

        public JsonResult DeletePost(string keyId, string Identifier)
        {
            return Json(objDirectoryDataAccess.DeletPost(int.Parse(keyId), Identifier), JsonRequestBehavior.AllowGet);
        }

        public ActionResult DownLoadDoc(string txtValue)
        {
            if (txtValue == null)
                txtValue = Request.QueryString["key"];
            var Doclist = objDirectoryDataAccess.GetListOfUploadDoc().Where(m => m.ID == int.Parse(txtValue)).FirstOrDefault(); ;
            string path = AppDomain.CurrentDomain.BaseDirectory + "UploadDocument/";
            byte[] fileBytes = System.IO.File.ReadAllBytes(path + Doclist.Name);
            string fileName = Doclist.Name;

            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fileName);
        }

        public ActionResult Following(string type)
        {
            int msg = 0;
            msg = objDirectoryDataAccess.UpdateFollower(type, HttpContext.Session["ID"].ToString(), HttpContext.Session["Serchid"].ToString());
            if (msg > 0)
                TempData["Success"] = "You are now Following " + HttpContext.Session["SerchUserName"].ToString();
            else if (msg == 0)
                TempData["error"] = "Some Error Occured. Please Contact Admin";
            var Followstatus = objDirectoryDataAccess.GetStatusFollower(HttpContext.Session["ID"].ToString(), HttpContext.Session["Serchid"].ToString());
            Session["status"] = Followstatus[0].CountFollower;

            return RedirectToAction("UserProfile", "User", new { @Usercode = Session["UserCode"] });
        }

        public ActionResult MyBlog(int Id)
        {
            var details = objDirectoryDataAccess.GetBlogList().Where(x => x.BlogId == Convert.ToInt32(Id)).FirstOrDefault();
            if (details == null)
            {
                return HttpNotFound();
            }
            Blog getfetcheddata = new Blog();

            return PartialView(@"~/Views/User/_myModal.cshtml", details);
        }

        [HttpPost]
        public ActionResult BlogPost(Blog model)
        {
            int msg = 0;
            if (ModelState.IsValid)
            {

                int UserCode = int.Parse(HttpContext.Session["ID"].ToString());
                msg = objDirectoryDataAccess.SubmitBlogPost(model, UserCode);
                if (msg > 0)
                {
                    ViewBag.BlogList_detail = objDirectoryDataAccess.GetBlogList();
                    TempData["success"] = "Blog Submitted Successfully. It will be available after Approval";
                }
                else
                {
                    TempData["error"] = "Some Error Occured. Please Contact Admin";
                }
            }
            else
            {
                return RedirectToAction("UserProfile", "User", new { @Usercode = Session["UserCode"] });
            }
            return RedirectToAction("UserProfile", "User", new { @Usercode = Session["UserCode"] });
        }

        public ActionResult Follower(int Id)
        {
            var details = objDirectoryDataAccess.GetBlogList().Where(x => x.BlogId == Convert.ToInt32(Id)).FirstOrDefault();
            if (details == null)
            {
                return HttpNotFound();
            }
            Blog getfetcheddata = new Blog();

            return PartialView(@"~/Views/MyProfile/_myModal.cshtml", details);
        }

        [HttpPost]
        public ActionResult SearchEmp(string txtSearch)
        {
            Session["SearchKey"] = txtSearch;
            ViewBag.user_detail = objDirectoryDataAccess.GetUserList(txtSearch);

            return this.View("SearchResult");
        }

        [HttpPost]
        public ActionResult SearchResult(UserRegistrationModel Name)
        {
            Session["SearchKey"] = Name.UserName;
            ViewBag.user_detail = objDirectoryDataAccess.GetUserList(Name.UserName);

            return View();
        }
    }
}


----------------------knowledgetree--------KTSelectdata-------------
@{
    List<KMTBusinessEntities.KnowledgeTreemModel> KTList = new KMTDataAccess.DirectoryDataAccess().GetKnowledgeTree();
    List<KMTBusinessEntities.posts> LikeList = new KMTDataAccess.DirectoryDataAccess().GetLikeCount("DOC");
    List<KMTBusinessEntities.posts> CommentList = new KMTDataAccess.DirectoryDataAccess().GetCommentListOnPost("DOC");
}
<div class="treeview-info-list">
    @if (ViewBag.listOfKtdata != null)
    {
        foreach (var item in ViewBag.listOfKtdata)
        {
            <div class="info-card">
                <div class="row">
                    <div class="col-sm-6 title">@item.TITLE</div>
                    <div class="col-sm-6 text-right"><a class="btn btn-success" href="/Admin/DownLoadDoc?key= @item.DOCMENTID"><i class="fa fa-download"></i> Download</a></div>
                    <div class="clearfix"></div>
                    <div class="col-sm-6">Category: <small>@item.CATEGORYNAME</small></div>
                    <div class="col-sm-6">Line of Business: <small>Line of Business</small></div>
                    <div class="col-sm-12 tags"><span><a href="#">Tags 1</a></span> <span><a href="#">Tags 2</a></span></div>
                    <div class="col-sm-6">Document Type: <small>application.pdf</small></div>
                    <div class="col-sm-6 text-right"><a href="/User/UserProfile?Usercode=@item.UserCode"> @item.UserName</a></div>
                    <div class="col-sm-6">
                        <i class="fa fa-thumbs-o-up"></i> @LikeList.Where(l => l.PostId == item.DOCMENTID).Count() &nbsp;&nbsp;
                        <i class="fa fa-commenting"></i> @CommentList.Where(l => l.PostId == item.DOCMENTID).Count()
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        foreach (var item in KTList)
        {
            <div class="info-card">
                <div class="row">
                    <div class="col-sm-6 title"><a href="/Admin/DownLoadDoc?key= @item.DOCMENTID">@item.TITLE</a></div>
                    <div class="col-sm-6 text-right"><a class="btn btn-success" href="/Admin/DownLoadDoc?key= @item.DOCMENTID"><i class="fa fa-download"></i> Download</a></div>
                    <div class="clearfix"></div>
                    <div class="col-sm-6">Category: <small>@item.CATEGORYNAME</small></div>
                    <div class="col-sm-6">Line of Business: <small>Line of Business</small></div>
                    <div class="col-sm-12 tags"><span><a href="#">Tags 1</a></span> <span><a href="#">Tags 2</a></span></div>
                    <div class="col-sm-6">Document Type: <small>application.pdf</small></div>
                    <div class="col-sm-6 text-right"><a href="/User/UserProfile?Usercode=@item.UserCode"> @item.UserName</a></div>
                    <div class="col-sm-6">
                        <i class="fa fa-thumbs-o-up"></i> @LikeList.Where(l => l.PostId == item.DOCMENTID).Count() &nbsp;&nbsp;
                        <i class="fa fa-commenting"></i> @CommentList.Where(l => l.PostId == item.DOCMENTID).Count()
                    </div>
                </div>
            </div>
        }
    }
</div>



--------------------knowledgetree----------kttreeview------------
@{   
    List<KMTBusinessEntities.KnowledgeTreemModel> KTList = new KMTDataAccess.DirectoryDataAccess().GetKnowledgeTree();
}
@if (KTList != null)
{
    Session["cat"] = "X";
    Session["catGo"] = "Y";
    <ul>
        @foreach (var item in KTList.Distinct().ToList())
        {
            if (Session["catGo"].ToString() != @item.RootName || Session["catGo"].ToString() == "Y")
            {
                <h4 class="media-heading" style="color:coral">
                    @item.RootName
                </h4>
                foreach (var Ritem in KTList.Distinct().ToList().Where(m => m.RootName == item.RootName))
                {
                    <li>
                        <ul>
                            @if (Session["cat"].ToString() != @Ritem.CATEGORYNAME || Session["cat"].ToString() == "X")
                            {

                                <a href="/KnowledgeTree/KtData?Id=@Ritem.CATEGORYNAME" class="btn btn-group-vertical btn-sm"> @Ritem.CATEGORYNAME</a>
                                @*<a href="@Url.Action("KtData", "KnowledgeTree")" class="btn btn-group-vertical btn-sm"> @Ritem.CATEGORYNAME</a>*@
                                Session["cat"] = Ritem.CATEGORYNAME;
                            }
                        </ul>
                    </li>
                }
                Session["catGo"] = item.RootName;
            }
        }
    </ul>
}



---------------knowledgetree.csht-------------------
@{
    List<KMTBusinessEntities.KnowledgeTreemModel> KTList = ViewBag.listOfKnowledgeTreemModel;
    IEnumerable<KMTBusinessEntities.KnowledgeTreemModel> listOfKtdata = ViewBag.listOfKtdata;
    List<KMTBusinessEntities.posts> LikeList = new KMTDataAccess.DirectoryDataAccess().GetLikeCount("DOC");
    List<KMTBusinessEntities.posts> CommentList = new KMTDataAccess.DirectoryDataAccess().GetCommentListOnPost("DOC");
    List<KMTBusinessEntities.UploadDocument> CategoryList = new KMTDataAccess.DirectoryDataAccess().GetDocumentCategoryForKT();
    List<KMTBusinessEntities.UploadDocument> DocypeList = new KMTDataAccess.DirectoryDataAccess().GetUploadDocumentType();
    List<KMTBusinessEntities.LobModel> LobList = new KMTDataAccess.DirectoryDataAccess().GetLob();
    List<string> checkedcategories = ViewBag.checkedcategories as List<string>;
    List<string> checkeddoctypes = ViewBag.checkeddoctypes as List<string>;
    List<string> checkedlobs = ViewBag.checkedlobs as List<string>;
}
<style>
    body {
        background: #efefef;
    }
</style>
<div class="content">
    <div class="treeview">
        <h1>KNOWLEDGE TREE</h1>
        <div class="row">
            <div class="col-sm-3">
                @if (KTList != null)
                {
                    <div class="treeview-category-list-container">
                        <h2>CATEGORY</h2>
                        <div class="treeview-category-list">
                            @foreach (var item in CategoryList)
                            {
                                {
                                    <div class="checkbox">
                                        @if (checkedcategories != null && checkedcategories.Contains(@item.Name))
                                        {
                                            <label><input type="checkbox" id="@item.Name" onclick="FilterResults()" value="@item.Name" name="category" checked="checked">@item.Name</label>
                                        }
                                        else
                                        {
                                            <label><input type="checkbox" id="@item.Name" onclick="FilterResults()" value="@item.Name" name="category">@item.Name</label>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <div class="treeview-category-list-container">
                        <h2>DOCUMENT TYPE</h2>
                        <div class="treeview-category-list">
                            @foreach (var item in DocypeList)
                            {
                                <div class="checkbox">
                                    @if (checkeddoctypes != null && checkeddoctypes.Contains(@item.type))
                                    {
                                        <label><input type="checkbox" id="@item.type" onclick="FilterResults()" value="@item.type" name="doctype" checked="checked">@item.type</label>
                                    }
                                    else
                                    {
                                        <label><input type="checkbox" id="@item.type" onclick="FilterResults()" value="@item.type" name="doctype">@item.type</label>
                                    }
                                </div>
                            }
                        </div>
                    </div>


                    <div class="treeview-category-list-container">
                        <h2>LINE OF BUSINESS</h2>
                        <div class="treeview-category-list">
                            @foreach (var item in LobList)
                            {
                                <div class="checkbox">
                                    @if (checkedlobs != null && checkedlobs.Contains(@item.Name))
                                    {
                                        <label><input type="checkbox" id="@item.Name" onclick="FilterResults()" value="@item.Name" name="lob" checked="checked">@item.Name</label>
                                    }
                                    else
                                    {
                                        <label><input type="checkbox" id="@item.Name" onclick="FilterResults()" value="@item.Name" name="lob">@item.Name</label>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="col-sm-9">
                @*@Html.Partial("~/Views/KnowledgeTree/_KTSelectData.cshtml")*@
                <div id="divResults" class="treeview-info-list">
                    @foreach (var item in listOfKtdata)
                    {
                        <div class='info-card'>
                            <div class='row'>
                                <div class='col-sm-6 title'>@item.TITLE</div>
                                <div class='col-sm-6 text-right'><a class='btn btn-success' href='/Admin/DownLoadDoc?key= @item.DOCMENTID'><i class='fa fa-download'></i> Download</a></div>
                                <div class='clearfix'></div>
                                <div class='col-sm-6'>Category: <small>@item.CATEGORYNAME</small></div>
                                <div class='col-sm-6'>Line of Business: <small>@item.LOBName</small></div>
                                <div class='col-sm-12 tags'>
                                    @foreach (var tags in @item.Tags.Split(',').ToList())
                                    {
                                        <span><a href='#'>@tags</a></span>
                                    }
                                </div>
                                <div class='col-sm-6'>Document Type: <small>@item.DOCUTYPE</small></div>


                                <div class='col-sm-6 text-right'><a href='/User/UserProfile?Usercode=@item.UserCode'> @item.UserName</a></div>
                                <div class='col-sm-6'>
                                    <i class='fa fa-thumbs-o-up'></i> @LikeList.Where(l => l.PostId == item.DOCMENTID).Count() &nbsp;&nbsp;
                                    <i class='fa fa-commenting'></i> @CommentList.Where(l => l.PostId == item.DOCMENTID).Count()
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/CustomScripts/KnowledgeTree.js"></script>



-----------pnotify-custom-min------------------

/*
PNotify 3.2.0 sciactive.com/pnotify/
(C) 2015 Hunter Perrin; Google, Inc.
license Apache-2.0
*/
!function(t,i){"function"==typeof define&&define.amd?define("pnotify",["jquery"],function(s){return i(s,t)}):"object"==typeof exports&&"undefined"!=typeof module?module.exports=i(require("jquery"),global||t):t.PNotify=i(t.jQuery,t)}("undefined"!=typeof window?window:this,function(t,i){var s=function(i){var e,o,n={dir1:"down",dir2:"left",push:"bottom",spacing1:36,spacing2:36,context:t("body"),modal:!1},a=t(i),r=function(){o=t("body"),c.prototype.options.stack.context=o,a=t(i),a.bind("resize",function(){e&&clearTimeout(e),e=setTimeout(function(){c.positionAll(!0)},10)})},h=function(i){var s=t("<div />",{class:"ui-pnotify-modal-overlay"});return s.prependTo(i.context),i.overlay_close&&s.click(function(){c.removeStack(i)}),s},c=function(t){this.state="initializing",this.timer=null,this.animTimer=null,this.styles=null,this.elem=null,this.container=null,this.title_container=null,this.text_container=null,this.animating=!1,this.timerHide=!1,this.parseOptions(t),this.init()};return t.extend(c.prototype,{version:"3.2.0",options:{title:!1,title_escape:!1,text:!1,text_escape:!1,styling:"brighttheme",addclass:"",cornerclass:"",auto_display:!0,width:"300px",min_height:"16px",type:"notice",icon:!0,animation:"fade",animate_speed:"normal",shadow:!0,hide:!0,delay:8e3,mouse_reset:!0,remove:!0,insert_brs:!0,destroy:!0,stack:n},modules:{},runModules:function(t,i){var s;for(var e in this.modules)s="object"==typeof i&&e in i?i[e]:i,"function"==typeof this.modules[e][t]&&(this.modules[e].notice=this,this.modules[e].options="object"==typeof this.options[e]?this.options[e]:{},this.modules[e][t](this,"object"==typeof this.options[e]?this.options[e]:{},s))},init:function(){var i=this;return this.modules={},t.extend(!0,this.modules,c.prototype.modules),"object"==typeof this.options.styling?this.styles=this.options.styling:this.styles=c.styling[this.options.styling],this.elem=t("<div />",{class:"ui-pnotify "+this.options.addclass,css:{display:"none"},"aria-live":"assertive","aria-role":"alertdialog",mouseenter:function(t){if(i.options.mouse_reset&&"out"===i.animating){if(!i.timerHide)return;i.cancelRemove()}i.options.hide&&i.options.mouse_reset&&i.cancelRemove()},mouseleave:function(t){i.options.hide&&i.options.mouse_reset&&"out"!==i.animating&&i.queueRemove(),c.positionAll()}}),"fade"===this.options.animation&&this.elem.addClass("ui-pnotify-fade-"+this.options.animate_speed),this.container=t("<div />",{class:this.styles.container+" ui-pnotify-container "+("error"===this.options.type?this.styles.error:"info"===this.options.type?this.styles.info:"success"===this.options.type?this.styles.success:this.styles.notice),role:"alert"}).appendTo(this.elem),""!==this.options.cornerclass&&this.container.removeClass("ui-corner-all").addClass(this.options.cornerclass),this.options.shadow&&this.container.addClass("ui-pnotify-shadow"),!1!==this.options.icon&&t("<div />",{class:"ui-pnotify-icon"}).append(t("<span />",{class:!0===this.options.icon?"error"===this.options.type?this.styles.error_icon:"info"===this.options.type?this.styles.info_icon:"success"===this.options.type?this.styles.success_icon:this.styles.notice_icon:this.options.icon})).prependTo(this.container),this.title_container=t("<h4 />",{class:"ui-pnotify-title"}).appendTo(this.container),!1===this.options.title?this.title_container.hide():this.options.title_escape?this.title_container.text(this.options.title):this.title_container.html(this.options.title),this.text_container=t("<div />",{class:"ui-pnotify-text","aria-role":"alert"}).appendTo(this.container),!1===this.options.text?this.text_container.hide():this.options.text_escape?this.text_container.text(this.options.text):this.text_container.html(this.options.insert_brs?String(this.options.text).replace(/\n/g,"<br />"):this.options.text),"string"==typeof this.options.width&&this.elem.css("width",this.options.width),"string"==typeof this.options.min_height&&this.container.css("min-height",this.options.min_height),"top"===this.options.stack.push?c.notices=t.merge([this],c.notices):c.notices=t.merge(c.notices,[this]),"top"===this.options.stack.push&&this.queuePosition(!1,1),this.options.stack.animation=!1,this.runModules("init"),this.state="closed",this.options.auto_display&&this.open(),this},update:function(i){var s=this.options;return this.parseOptions(s,i),this.elem.removeClass("ui-pnotify-fade-slow ui-pnotify-fade-normal ui-pnotify-fade-fast"),"fade"===this.options.animation&&this.elem.addClass("ui-pnotify-fade-"+this.options.animate_speed),this.options.cornerclass!==s.cornerclass&&this.container.removeClass("ui-corner-all "+s.cornerclass).addClass(this.options.cornerclass),this.options.shadow!==s.shadow&&(this.options.shadow?this.container.addClass("ui-pnotify-shadow"):this.container.removeClass("ui-pnotify-shadow")),!1===this.options.addclass?this.elem.removeClass(s.addclass):this.options.addclass!==s.addclass&&this.elem.removeClass(s.addclass).addClass(this.options.addclass),!1===this.options.title?this.title_container.slideUp("fast"):this.options.title!==s.title&&(this.options.title_escape?this.title_container.text(this.options.title):this.title_container.html(this.options.title),!1===s.title&&this.title_container.slideDown(200)),!1===this.options.text?this.text_container.slideUp("fast"):this.options.text!==s.text&&(this.options.text_escape?this.text_container.text(this.options.text):this.text_container.html(this.options.insert_brs?String(this.options.text).replace(/\n/g,"<br />"):this.options.text),!1===s.text&&this.text_container.slideDown(200)),this.options.type!==s.type&&this.container.removeClass(this.styles.error+" "+this.styles.notice+" "+this.styles.success+" "+this.styles.info).addClass("error"===this.options.type?this.styles.error:"info"===this.options.type?this.styles.info:"success"===this.options.type?this.styles.success:this.styles.notice),(this.options.icon!==s.icon||!0===this.options.icon&&this.options.type!==s.type)&&(this.container.find("div.ui-pnotify-icon").remove(),!1!==this.options.icon&&t("<div />",{class:"ui-pnotify-icon"}).append(t("<span />",{class:!0===this.options.icon?"error"===this.options.type?this.styles.error_icon:"info"===this.options.type?this.styles.info_icon:"success"===this.options.type?this.styles.success_icon:this.styles.notice_icon:this.options.icon})).prependTo(this.container)),this.options.width!==s.width&&this.elem.animate({width:this.options.width}),this.options.min_height!==s.min_height&&this.container.animate({minHeight:this.options.min_height}),this.options.hide?s.hide||this.queueRemove():this.cancelRemove(),this.queuePosition(!0),this.runModules("update",s),this},open:function(){this.state="opening",this.runModules("beforeOpen");var t=this;return this.elem.parent().length||this.elem.appendTo(this.options.stack.context?this.options.stack.context:o),"top"!==this.options.stack.push&&this.position(!0),this.animateIn(function(){t.queuePosition(!0),t.options.hide&&t.queueRemove(),t.state="open",t.runModules("afterOpen")}),this},remove:function(s){this.state="closing",this.timerHide=!!s,this.runModules("beforeClose");var e=this;return this.timer&&(i.clearTimeout(this.timer),this.timer=null),this.animateOut(function(){if(e.state="closed",e.runModules("afterClose"),e.queuePosition(!0),e.options.remove&&e.elem.detach(),e.runModules("beforeDestroy"),e.options.destroy&&null!==c.notices){var i=t.inArray(e,c.notices);-1!==i&&c.notices.splice(i,1)}e.runModules("afterDestroy")}),this},get:function(){return this.elem},parseOptions:function(i,s){this.options=t.extend(!0,{},c.prototype.options),this.options.stack=c.prototype.options.stack;for(var e,o=[i,s],n=0;n<o.length&&void 0!==(e=o[n]);n++)if("object"!=typeof e)this.options.text=e;else for(var a in e)this.modules[a]?t.extend(!0,this.options[a],e[a]):this.options[a]=e[a]},animateIn:function(t){this.animating="in";var i=this,s=function(){i.animTimer&&clearTimeout(i.animTimer),"in"===i.animating&&(i.elem.is(":visible")?(t&&t.call(),i.animating=!1):i.animTimer=setTimeout(s,40))};"fade"===this.options.animation?(this.elem.one("webkitTransitionEnd mozTransitionEnd MSTransitionEnd oTransitionEnd transitionend",s).addClass("ui-pnotify-in"),this.elem.css("opacity"),this.elem.addClass("ui-pnotify-fade-in"),this.animTimer=setTimeout(s,650)):(this.elem.addClass("ui-pnotify-in"),s())},animateOut:function(i){this.animating="out";var s=this,e=function(){if(s.animTimer&&clearTimeout(s.animTimer),"out"===s.animating)if("0"!=s.elem.css("opacity")&&s.elem.is(":visible"))s.animTimer=setTimeout(e,40);else{if(s.elem.removeClass("ui-pnotify-in"),s.options.stack.overlay){var o=!1;t.each(c.notices,function(t,i){i!=s&&i.options.stack===s.options.stack&&"closed"!=i.state&&(o=!0)}),o||s.options.stack.overlay.hide()}i&&i.call(),s.animating=!1}};"fade"===this.options.animation?(this.elem.one("webkitTransitionEnd mozTransitionEnd MSTransitionEnd oTransitionEnd transitionend",e).removeClass("ui-pnotify-fade-in"),this.animTimer=setTimeout(e,650)):(this.elem.removeClass("ui-pnotify-in"),e())},position:function(t){var i=this.options.stack,s=this.elem;if(void 0===i.context&&(i.context=o),i){"number"!=typeof i.nextpos1&&(i.nextpos1=i.firstpos1),"number"!=typeof i.nextpos2&&(i.nextpos2=i.firstpos2),"number"!=typeof i.addpos2&&(i.addpos2=0);var e=!s.hasClass("ui-pnotify-in");if(!e||t){i.modal&&(i.overlay?i.overlay.show():i.overlay=h(i)),s.addClass("ui-pnotify-move");var n,r,c;switch(i.dir1){case"down":c="top";break;case"up":c="bottom";break;case"left":c="right";break;case"right":c="left"}n=parseInt(s.css(c).replace(/(?:\..*|[^0-9.])/g,"")),isNaN(n)&&(n=0),void 0!==i.firstpos1||e||(i.firstpos1=n,i.nextpos1=i.firstpos1);var p;switch(i.dir2){case"down":p="top";break;case"up":p="bottom";break;case"left":p="right";break;case"right":p="left"}switch(r=parseInt(s.css(p).replace(/(?:\..*|[^0-9.])/g,"")),isNaN(r)&&(r=0),void 0!==i.firstpos2||e||(i.firstpos2=r,i.nextpos2=i.firstpos2),("down"===i.dir1&&i.nextpos1+s.height()>(i.context.is(o)?a.height():i.context.prop("scrollHeight"))||"up"===i.dir1&&i.nextpos1+s.height()>(i.context.is(o)?a.height():i.context.prop("scrollHeight"))||"left"===i.dir1&&i.nextpos1+s.width()>(i.context.is(o)?a.width():i.context.prop("scrollWidth"))||"right"===i.dir1&&i.nextpos1+s.width()>(i.context.is(o)?a.width():i.context.prop("scrollWidth")))&&(i.nextpos1=i.firstpos1,i.nextpos2+=i.addpos2+(void 0===i.spacing2?25:i.spacing2),i.addpos2=0),"number"==typeof i.nextpos2&&(i.animation?s.css(p,i.nextpos2+"px"):(s.removeClass("ui-pnotify-move"),s.css(p,i.nextpos2+"px"),s.css(p),s.addClass("ui-pnotify-move"))),i.dir2){case"down":case"up":s.outerHeight(!0)>i.addpos2&&(i.addpos2=s.height());break;case"left":case"right":s.outerWidth(!0)>i.addpos2&&(i.addpos2=s.width())}switch("number"==typeof i.nextpos1&&(i.animation?s.css(c,i.nextpos1+"px"):(s.removeClass("ui-pnotify-move"),s.css(c,i.nextpos1+"px"),s.css(c),s.addClass("ui-pnotify-move"))),i.dir1){case"down":case"up":i.nextpos1+=s.height()+(void 0===i.spacing1?25:i.spacing1);break;case"left":case"right":i.nextpos1+=s.width()+(void 0===i.spacing1?25:i.spacing1)}}return this}},queuePosition:function(t,i){return e&&clearTimeout(e),i||(i=10),e=setTimeout(function(){c.positionAll(t)},i),this},cancelRemove:function(){return this.timer&&i.clearTimeout(this.timer),this.animTimer&&i.clearTimeout(this.animTimer),"closing"===this.state&&(this.state="open",this.animating=!1,this.elem.addClass("ui-pnotify-in"),"fade"===this.options.animation&&this.elem.addClass("ui-pnotify-fade-in")),this},queueRemove:function(){var t=this;return this.cancelRemove(),this.timer=i.setTimeout(function(){t.remove(!0)},isNaN(this.options.delay)?0:this.options.delay),this}}),t.extend(c,{notices:[],reload:s,removeAll:function(){t.each(c.notices,function(t,i){i.remove&&i.remove(!1)})},removeStack:function(i){t.each(c.notices,function(t,s){s.remove&&s.options.stack===i&&s.remove(!1)})},positionAll:function(i){if(e&&clearTimeout(e),e=null,c.notices&&c.notices.length)t.each(c.notices,function(t,s){var e=s.options.stack;e&&(e.overlay&&e.overlay.hide(),e.nextpos1=e.firstpos1,e.nextpos2=e.firstpos2,e.addpos2=0,e.animation=i)}),t.each(c.notices,function(t,i){i.position()});else{var s=c.prototype.options.stack;s&&(delete s.nextpos1,delete s.nextpos2)}},styling:{brighttheme:{container:"brighttheme",notice:"brighttheme-notice",notice_icon:"brighttheme-icon-notice",info:"brighttheme-info",info_icon:"brighttheme-icon-info",success:"brighttheme-success",success_icon:"brighttheme-icon-success",error:"brighttheme-error",error_icon:"brighttheme-icon-error"},bootstrap3:{container:"alert",notice:"alert-warning",notice_icon:"glyphicon glyphicon-exclamation-sign",info:"alert-info",info_icon:"glyphicon glyphicon-info-sign",success:"alert-success",success_icon:"glyphicon glyphicon-ok-sign",error:"alert-danger",error_icon:"glyphicon glyphicon-warning-sign"}}}),c.styling.fontawesome=t.extend({},c.styling.bootstrap3),t.extend(c.styling.fontawesome,{notice_icon:"fa fa-exclamation-circle",info_icon:"fa fa-info",success_icon:"fa fa-check",error_icon:"fa fa-warning"}),i.document.body?r():t(r),c};return s(i)});
//# sourceMappingURL=pnotify.js.map
// Animate
!function(n,i){"function"==typeof define&&define.amd?define("pnotify.animate",["jquery","pnotify"],i):"object"==typeof exports&&"undefined"!=typeof module?module.exports=i(require("jquery"),require("./pnotify")):i(n.jQuery,n.PNotify)}("undefined"!=typeof window?window:this,function(n,i){return i.prototype.options.animate={animate:!1,in_class:"",out_class:""},i.prototype.modules.animate={init:function(n,i){this.setUpAnimations(n,i),n.attention=function(i,t){n.elem.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",function(){n.elem.removeClass(i),t&&t.call(n)}).addClass("animated "+i)}},update:function(n,i,t){i.animate!=t.animate&&this.setUpAnimations(n,i)},setUpAnimations:function(n,i){if(i.animate){n.options.animation="none",n.elem.removeClass("ui-pnotify-fade-slow ui-pnotify-fade-normal ui-pnotify-fade-fast"),n._animateIn||(n._animateIn=n.animateIn),n._animateOut||(n._animateOut=n.animateOut),n.animateIn=this.animateIn.bind(this),n.animateOut=this.animateOut.bind(this);var t=400;"slow"===n.options.animate_speed?t=600:"fast"===n.options.animate_speed?t=200:n.options.animate_speed>0&&(t=n.options.animate_speed),t/=1e3,n.elem.addClass("animated").css({"-webkit-animation-duration":t+"s","-moz-animation-duration":t+"s","animation-duration":t+"s"})}else n._animateIn&&n._animateOut&&(n.animateIn=n._animateIn,delete n._animateIn,n.animateOut=n._animateOut,delete n._animateOut,n.elem.addClass("animated"))},animateIn:function(n){this.notice.animating="in";var i=this;n=function(){i.notice.elem.removeClass(i.options.in_class),this&&this.call(),i.notice.animating=!1}.bind(n),this.notice.elem.show().one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",n).removeClass(this.options.out_class).addClass("ui-pnotify-in").addClass(this.options.in_class)},animateOut:function(n){this.notice.animating="out";var i=this;n=function(){i.notice.elem.removeClass("ui-pnotify-in "+i.options.out_class),this&&this.call(),i.notice.animating=!1}.bind(n),this.notice.elem.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",n).removeClass(this.options.in_class).addClass(this.options.out_class)}},i});
//# sourceMappingURL=pnotify.animate.js.map
// Buttons
!function(o,s){"function"==typeof define&&define.amd?define("pnotify.buttons",["jquery","pnotify"],s):"object"==typeof exports&&"undefined"!=typeof module?module.exports=s(require("jquery"),require("./pnotify")):s(o.jQuery,o.PNotify)}("undefined"!=typeof window?window:this,function(o,s){return s.prototype.options.buttons={closer:!0,closer_hover:!0,sticker:!0,sticker_hover:!0,show_on_nonblock:!1,labels:{close:"Close",stick:"Stick",unstick:"Unstick"},classes:{closer:null,pin_up:null,pin_down:null}},s.prototype.modules.buttons={init:function(s,i){var n=this;s.elem.on({mouseenter:function(o){!n.options.sticker||s.options.nonblock&&s.options.nonblock.nonblock&&!n.options.show_on_nonblock||n.sticker.trigger("pnotify:buttons:toggleStick").css("visibility","visible"),!n.options.closer||s.options.nonblock&&s.options.nonblock.nonblock&&!n.options.show_on_nonblock||n.closer.css("visibility","visible")},mouseleave:function(o){n.options.sticker_hover&&n.sticker.css("visibility","hidden"),n.options.closer_hover&&n.closer.css("visibility","hidden")}}),this.sticker=o("<div />",{class:"ui-pnotify-sticker","aria-role":"button","aria-pressed":s.options.hide?"false":"true",tabindex:"0",title:s.options.hide?i.labels.stick:i.labels.unstick,css:{cursor:"pointer",visibility:i.sticker_hover?"hidden":"visible"},click:function(){s.options.hide=!s.options.hide,s.options.hide?s.queueRemove():s.cancelRemove(),o(this).trigger("pnotify:buttons:toggleStick")}}).bind("pnotify:buttons:toggleStick",function(){var i=null===n.options.classes.pin_up?s.styles.pin_up:n.options.classes.pin_up,e=null===n.options.classes.pin_down?s.styles.pin_down:n.options.classes.pin_down;o(this).attr("title",s.options.hide?n.options.labels.stick:n.options.labels.unstick).children().attr("class","").addClass(s.options.hide?i:e).attr("aria-pressed",s.options.hide?"false":"true")}).append("<span />").trigger("pnotify:buttons:toggleStick").prependTo(s.container),(!i.sticker||s.options.nonblock&&s.options.nonblock.nonblock&&!i.show_on_nonblock)&&this.sticker.css("display","none"),this.closer=o("<div />",{class:"ui-pnotify-closer","aria-role":"button",tabindex:"0",title:i.labels.close,css:{cursor:"pointer",visibility:i.closer_hover?"hidden":"visible"},click:function(){s.remove(!1),n.sticker.css("visibility","hidden"),n.closer.css("visibility","hidden")}}).append(o("<span />",{class:null===i.classes.closer?s.styles.closer:i.classes.closer})).prependTo(s.container),(!i.closer||s.options.nonblock&&s.options.nonblock.nonblock&&!i.show_on_nonblock)&&this.closer.css("display","none")},update:function(o,s){!s.closer||o.options.nonblock&&o.options.nonblock.nonblock&&!s.show_on_nonblock?this.closer.css("display","none"):s.closer&&this.closer.css("display","block"),!s.sticker||o.options.nonblock&&o.options.nonblock.nonblock&&!s.show_on_nonblock?this.sticker.css("display","none"):s.sticker&&this.sticker.css("display","block"),this.sticker.trigger("pnotify:buttons:toggleStick"),this.closer.find("span").attr("class","").addClass(null===s.classes.closer?o.styles.closer:s.classes.closer),s.sticker_hover?this.sticker.css("visibility","hidden"):o.options.nonblock&&o.options.nonblock.nonblock&&!s.show_on_nonblock||this.sticker.css("visibility","visible"),s.closer_hover?this.closer.css("visibility","hidden"):o.options.nonblock&&o.options.nonblock.nonblock&&!s.show_on_nonblock||this.closer.css("visibility","visible")}},o.extend(s.styling.brighttheme,{closer:"brighttheme-icon-closer",pin_up:"brighttheme-icon-sticker",pin_down:"brighttheme-icon-sticker brighttheme-icon-stuck"}),o.extend(s.styling.bootstrap3,{closer:"glyphicon glyphicon-remove",pin_up:"glyphicon glyphicon-pause",pin_down:"glyphicon glyphicon-play"}),o.extend(s.styling.fontawesome,{closer:"fa fa-times",pin_up:"fa fa-pause",pin_down:"fa fa-play"}),s});
//# sourceMappingURL=pnotify.buttons.js.map
// Callbacks
!function(o,t){"function"==typeof define&&define.amd?define("pnotify.callbacks",["jquery","pnotify"],t):"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./pnotify")):t(o.jQuery,o.PNotify)}("undefined"!=typeof window?window:this,function(o,t){var i=t.prototype.init,e=t.prototype.open,n=t.prototype.remove;return t.prototype.init=function(){this.options.before_init&&this.options.before_init(this.options),i.apply(this,arguments),this.options.after_init&&this.options.after_init(this)},t.prototype.open=function(){var o;this.options.before_open&&(o=this.options.before_open(this)),!1!==o&&(e.apply(this,arguments),this.options.after_open&&this.options.after_open(this))},t.prototype.remove=function(o){var t;this.options.before_close&&(t=this.options.before_close(this,o)),!1!==t&&(n.apply(this,arguments),this.options.after_close&&this.options.after_close(this,o))},t});
//# sourceMappingURL=pnotify.callbacks.js.map
// Confirm
!function(t,n){"function"==typeof define&&define.amd?define("pnotify.confirm",["jquery","pnotify"],n):"object"==typeof exports&&"undefined"!=typeof module?module.exports=n(require("jquery"),require("./pnotify")):n(t.jQuery,t.PNotify)}("undefined"!=typeof window?window:this,function(t,n){return n.prototype.options.confirm={confirm:!1,prompt:!1,prompt_class:"",prompt_default:"",prompt_multi_line:!1,align:"right",buttons:[{text:"Ok",addClass:"",promptTrigger:!0,click:function(t,n){t.remove(),t.get().trigger("pnotify.confirm",[t,n])}},{text:"Cancel",addClass:"",click:function(t){t.remove(),t.get().trigger("pnotify.cancel",t)}}]},n.prototype.modules.confirm={init:function(n,o){this.container=t('<div class="ui-pnotify-action-bar" style="margin-top:5px;clear:both;" />').css("text-align",o.align).appendTo(n.container),o.confirm||o.prompt?this.makeDialog(n,o):this.container.hide()},update:function(t,n){n.confirm?(this.makeDialog(t,n),this.container.show()):this.container.hide().empty()},afterOpen:function(t,n){n.prompt&&this.prompt.focus()},makeDialog:function(o,e){var i,s,r=!1,p=this;this.container.empty(),e.prompt&&(this.prompt=t("<"+(e.prompt_multi_line?'textarea rows="5"':'input type="text"')+' style="margin-bottom:5px;clear:both;" />').addClass((void 0===o.styles.input?"":o.styles.input)+" "+(void 0===e.prompt_class?"":e.prompt_class)).val(e.prompt_default).appendTo(this.container));for(var u=e.buttons[0]&&e.buttons[0]!==n.prototype.options.confirm.buttons[0],c=0;c<e.buttons.length;c++)null===e.buttons[c]||u&&n.prototype.options.confirm.buttons[c]&&n.prototype.options.confirm.buttons[c]===e.buttons[c]||(i=e.buttons[c],r?this.container.append(" "):r=!0,s=t('<button type="button" class="ui-pnotify-action-button" />').addClass((void 0===o.styles.btn?"":o.styles.btn)+" "+(void 0===i.addClass?"":i.addClass)).text(i.text).appendTo(this.container).on("click",function(t){return function(){"function"==typeof t.click&&t.click(o,e.prompt?p.prompt.val():null)}}(i)),e.prompt&&!e.prompt_multi_line&&i.promptTrigger&&this.prompt.keypress(function(t){return function(n){13==n.keyCode&&t.click()}}(s)),o.styles.text&&s.wrapInner('<span class="'+o.styles.text+'"></span>'),o.styles.btnhover&&s.hover(function(t){return function(){t.addClass(o.styles.btnhover)}}(s),function(t){return function(){t.removeClass(o.styles.btnhover)}}(s)),o.styles.btnactive&&s.on("mousedown",function(t){return function(){t.addClass(o.styles.btnactive)}}(s)).on("mouseup",function(t){return function(){t.removeClass(o.styles.btnactive)}}(s)),o.styles.btnfocus&&s.on("focus",function(t){return function(){t.addClass(o.styles.btnfocus)}}(s)).on("blur",function(t){return function(){t.removeClass(o.styles.btnfocus)}}(s)))}},t.extend(n.styling.bootstrap3,{btn:"btn btn-default",input:"form-control"}),t.extend(n.styling.fontawesome,{btn:"btn btn-default",input:"form-control"}),n});
//# sourceMappingURL=pnotify.confirm.js.map
// Desktop
!function(i,t){"function"==typeof define&&define.amd?define("pnotify.desktop",["jquery","pnotify"],t):"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./pnotify")):t(i.jQuery,i.PNotify)}("undefined"!=typeof window?window:this,function(i,t){var o,n=function(i,t){return(n="Notification"in window?function(i,t){return new Notification(i,t)}:"mozNotification"in navigator?function(i,t){return navigator.mozNotification.createNotification(i,t.body,t.icon).show()}:"webkitNotifications"in window?function(i,t){return window.webkitNotifications.createNotification(t.icon,i,t.body)}:function(i,t){return null})(i,t)};return t.prototype.options.desktop={desktop:!1,fallback:!0,icon:null,tag:null,title:null,text:null},t.prototype.modules.desktop={genNotice:function(i,t){null===t.icon?this.icon="http://sciactive.com/pnotify/includes/desktop/"+i.options.type+".png":!1===t.icon?this.icon=null:this.icon=t.icon,null!==this.tag&&null===t.tag||(this.tag=null===t.tag?"PNotify-"+Math.round(1e6*Math.random()):t.tag),i.desktop=n(t.title||i.options.title,{icon:this.icon,body:t.text||i.options.text,tag:this.tag}),!("close"in i.desktop)&&"cancel"in i.desktop&&(i.desktop.close=function(){i.desktop.cancel()}),i.desktop.onclick=function(){i.elem.trigger("click")},i.desktop.onclose=function(){"closing"!==i.state&&"closed"!==i.state&&i.remove()}},init:function(i,n){if(n.desktop){if(0!==(o=t.desktop.checkPermission()))return void(n.fallback||(i.options.auto_display=!1));this.genNotice(i,n)}},update:function(i,t,n){0!==o&&t.fallback||!t.desktop||this.genNotice(i,t)},beforeOpen:function(i,t){0!==o&&t.fallback||!t.desktop||i.elem.css({left:"-10000px"}).removeClass("ui-pnotify-in")},afterOpen:function(i,t){0!==o&&t.fallback||!t.desktop||(i.elem.css({left:"-10000px"}).removeClass("ui-pnotify-in"),"show"in i.desktop&&i.desktop.show())},beforeClose:function(i,t){0!==o&&t.fallback||!t.desktop||i.elem.css({left:"-10000px"}).removeClass("ui-pnotify-in")},afterClose:function(i,t){0!==o&&t.fallback||!t.desktop||(i.elem.css({left:"-10000px"}).removeClass("ui-pnotify-in"),"close"in i.desktop&&i.desktop.close())}},t.desktop={permission:function(){"undefined"!=typeof Notification&&"requestPermission"in Notification?Notification.requestPermission():"webkitNotifications"in window&&window.webkitNotifications.requestPermission()},checkPermission:function(){return"undefined"!=typeof Notification&&"permission"in Notification?"granted"===Notification.permission?0:1:"webkitNotifications"in window&&0==window.webkitNotifications.checkPermission()?0:1}},o=t.desktop.checkPermission(),t});
//# sourceMappingURL=pnotify.desktop.js.map
// History
!function(t,i){"function"==typeof define&&define.amd?define("pnotify.history",["jquery","pnotify"],i):"object"==typeof exports&&"undefined"!=typeof module?module.exports=i(require("jquery"),require("./pnotify")):i(t.jQuery,t.PNotify)}("undefined"!=typeof window?window:this,function(t,i){var e,o;return t(function(){t("body").on("pnotify.history-all",function(){t.each(i.notices,function(){this.modules.history.inHistory&&(this.elem.is(":visible")?this.options.hide&&this.queueRemove():this.open&&this.open())})}).on("pnotify.history-last",function(){var t,e="top"===i.prototype.options.stack.push,o=e?0:-1;do{if(t=-1===o?i.notices.slice(o):i.notices.slice(o,o+1),!t[0])return!1;o=e?o+1:o-1}while(!t[0].modules.history.inHistory||t[0].elem.is(":visible"));t[0].open&&t[0].open()})}),i.prototype.options.history={history:!0,menu:!1,fixed:!0,maxonscreen:1/0,labels:{redisplay:"Redisplay",all:"All",last:"Last"}},i.prototype.modules.history={init:function(i,n){if(i.options.destroy=!1,this.inHistory=n.history,n.menu&&void 0===e){e=t("<div />",{class:"ui-pnotify-history-container "+i.styles.hi_menu,mouseleave:function(){e.css("top","-"+o+"px")}}).append(t("<div />",{class:"ui-pnotify-history-header",text:n.labels.redisplay})).append(t("<button />",{class:"ui-pnotify-history-all "+i.styles.hi_btn,text:n.labels.all,mouseenter:function(){t(this).addClass(i.styles.hi_btnhov)},mouseleave:function(){t(this).removeClass(i.styles.hi_btnhov)},click:function(){return t(this).trigger("pnotify.history-all"),!1}})).append(t("<button />",{class:"ui-pnotify-history-last "+i.styles.hi_btn,text:n.labels.last,mouseenter:function(){t(this).addClass(i.styles.hi_btnhov)},mouseleave:function(){t(this).removeClass(i.styles.hi_btnhov)},click:function(){return t(this).trigger("pnotify.history-last"),!1}})).appendTo("body");var s=t("<span />",{class:"ui-pnotify-history-pulldown "+i.styles.hi_hnd,mouseenter:function(){e.css("top","0")}}).appendTo(e);o=s.offset().top+2,e.css("top","-"+o+"px"),n.fixed&&e.addClass("ui-pnotify-history-fixed")}},update:function(t,i){this.inHistory=i.history,i.fixed&&e?e.addClass("ui-pnotify-history-fixed"):e&&e.removeClass("ui-pnotify-history-fixed")},beforeOpen:function(e,o){if(i.notices&&i.notices.length>o.maxonscreen){var n;n="top"!==e.options.stack.push?i.notices.slice(0,i.notices.length-o.maxonscreen):i.notices.slice(o.maxonscreen,i.notices.length),t.each(n,function(){this.remove&&this.remove()})}}},t.extend(i.styling.brighttheme,{hi_menu:"ui-pnotify-history-brighttheme",hi_btn:"",hi_btnhov:"",hi_hnd:""}),t.extend(i.styling.bootstrap3,{hi_menu:"well",hi_btn:"btn btn-default",hi_btnhov:"",hi_hnd:"glyphicon glyphicon-chevron-down"}),t.extend(i.styling.fontawesome,{hi_menu:"well",hi_btn:"btn btn-default",hi_btnhov:"",hi_hnd:"fa fa-chevron-down"}),i});
//# sourceMappingURL=pnotify.history.js.map
// Mobile
!function(i,o){"function"==typeof define&&define.amd?define("pnotify.mobile",["jquery","pnotify"],o):"object"==typeof exports&&"undefined"!=typeof module?module.exports=o(require("jquery"),require("./pnotify")):o(i.jQuery,i.PNotify)}("undefined"!=typeof window?window:this,function(i,o){return o.prototype.options.mobile={swipe_dismiss:!0,styling:!0},o.prototype.modules.mobile={init:function(i,o){var t=this,e=null,n=null,s=null;this.swipe_dismiss=o.swipe_dismiss,this.doMobileStyling(i,o),i.elem.on({touchstart:function(o){t.swipe_dismiss&&(e=o.originalEvent.touches[0].screenX,s=i.elem.width(),i.container.css("left","0"))},touchmove:function(o){if(e&&t.swipe_dismiss){var a=o.originalEvent.touches[0].screenX;n=a-e;var c=(1-Math.abs(n)/s)*i.options.opacity;i.elem.css("opacity",c),i.container.css("left",n)}},touchend:function(){if(e&&t.swipe_dismiss){if(Math.abs(n)>40){var o=n<0?-2*s:2*s;i.elem.animate({opacity:0},100),i.container.animate({left:o},100),i.remove()}else i.elem.animate({opacity:i.options.opacity},100),i.container.animate({left:0},100);e=null,n=null,s=null}},touchcancel:function(){e&&t.swipe_dismiss&&(i.elem.animate({opacity:i.options.opacity},100),i.container.animate({left:0},100),e=null,n=null,s=null)}})},update:function(i,o){this.swipe_dismiss=o.swipe_dismiss,this.doMobileStyling(i,o)},doMobileStyling:function(o,t){t.styling?(o.elem.addClass("ui-pnotify-mobile-able"),i(window).width()<=480?(o.options.stack.mobileOrigSpacing1||(o.options.stack.mobileOrigSpacing1=o.options.stack.spacing1,o.options.stack.mobileOrigSpacing2=o.options.stack.spacing2),o.options.stack.spacing1=0,o.options.stack.spacing2=0):(o.options.stack.mobileOrigSpacing1||o.options.stack.mobileOrigSpacing2)&&(o.options.stack.spacing1=o.options.stack.mobileOrigSpacing1,delete o.options.stack.mobileOrigSpacing1,o.options.stack.spacing2=o.options.stack.mobileOrigSpacing2,delete o.options.stack.mobileOrigSpacing2)):(o.elem.removeClass("ui-pnotify-mobile-able"),o.options.stack.mobileOrigSpacing1&&(o.options.stack.spacing1=o.options.stack.mobileOrigSpacing1,delete o.options.stack.mobileOrigSpacing1),o.options.stack.mobileOrigSpacing2&&(o.options.stack.spacing2=o.options.stack.mobileOrigSpacing2,delete o.options.stack.mobileOrigSpacing2))}},o});
//# sourceMappingURL=pnotify.mobile.js.map
// Nonblock
!function(o,e){"function"==typeof define&&define.amd?define("pnotify.nonblock",["jquery","pnotify"],e):"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("./pnotify")):e(o.jQuery,o.PNotify)}("undefined"!=typeof window?window:this,function(o,e){var n,t=function(e,n){var t;if(e=e.toLowerCase(),document.createEvent&&this.dispatchEvent){if(e=e.replace(/^on/,""),e.match(/^(dbl)?click$|^mouse(move|down|up|over|out|enter|leave)$|^contextmenu$/)?(o(this).offset(),t=document.createEvent("MouseEvents"),t.initMouseEvent(e,n.bubbles,n.cancelable,n.view,n.detail,n.screenX,n.screenY,n.clientX,n.clientY,n.ctrlKey,n.altKey,n.shiftKey,n.metaKey,n.button,n.relatedTarget)):e.match(/^(focus|blur|select|change|reset)$|^key(press|down|up)$/)?(t=document.createEvent("UIEvents"),t.initUIEvent(e,n.bubbles,n.cancelable,n.view,n.detail)):e.match(/^(scroll|resize|(un)?load|abort|error)$/)&&(t=document.createEvent("HTMLEvents"),t.initEvent(e,n.bubbles,n.cancelable)),!t)return;this.dispatchEvent(t)}else e.match(/^on/)||(e="on"+e),t=document.createEventObject(n),this.fireEvent(e,t)},i=function(e,i,c){e.elem.addClass("ui-pnotify-nonblock-hide");var l=document.elementFromPoint(i.clientX,i.clientY);e.elem.removeClass("ui-pnotify-nonblock-hide");var s=o(l),a=s.css("cursor");"auto"===a&&"A"===l.tagName&&(a="pointer"),e.elem.css("cursor","auto"!==a?a:"default"),n&&n.get(0)==l||(n&&(t.call(n.get(0),"mouseleave",i.originalEvent),t.call(n.get(0),"mouseout",i.originalEvent)),t.call(l,"mouseenter",i.originalEvent),t.call(l,"mouseover",i.originalEvent)),t.call(l,c,i.originalEvent),n=s};return e.prototype.options.nonblock={nonblock:!1},e.prototype.modules.nonblock={init:function(o,e){var t=this;o.elem.on({mouseenter:function(e){t.options.nonblock&&e.stopPropagation(),t.options.nonblock&&o.elem.addClass("ui-pnotify-nonblock-fade")},mouseleave:function(e){t.options.nonblock&&e.stopPropagation(),n=null,o.elem.css("cursor","auto"),t.options.nonblock&&"out"!==o.animating&&o.elem.removeClass("ui-pnotify-nonblock-fade")},mouseover:function(o){t.options.nonblock&&o.stopPropagation()},mouseout:function(o){t.options.nonblock&&o.stopPropagation()},mousemove:function(e){t.options.nonblock&&(e.stopPropagation(),i(o,e,"onmousemove"))},mousedown:function(e){t.options.nonblock&&(e.stopPropagation(),e.preventDefault(),i(o,e,"onmousedown"))},mouseup:function(e){t.options.nonblock&&(e.stopPropagation(),e.preventDefault(),i(o,e,"onmouseup"))},click:function(e){t.options.nonblock&&(e.stopPropagation(),i(o,e,"onclick"))},dblclick:function(e){t.options.nonblock&&(e.stopPropagation(),i(o,e,"ondblclick"))}})}},e});
//# sourceMappingURL=pnotify.nonblock.js.map



--------------toastr.j--------------

/*
 * Toastr
 * Copyright 2012-2015
 * Authors: John Papa, Hans Fjällemark, and Tim Ferrell.
 * All Rights Reserved.
 * Use, reproduction, distribution, and modification of this code is subject to the terms and
 * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
 *
 * ARIA Support: Greta Krafsig
 *
 * Project: https://github.com/CodeSeven/toastr
 */
/* global define */
; (function (define) {
    define(['jquery'], function ($) {
        return (function () {
            var $container;
            var listener;
            var toastId = 0;
            var toastType = {
                error: 'error',
                info: 'info',
                success: 'success',
                warning: 'warning'
            };

            var toastr = {
                clear: clear,
                remove: remove,
                error: error,
                getContainer: getContainer,
                info: info,
                options: {},
                subscribe: subscribe,
                success: success,
                version: '2.1.1',
                warning: warning
            };

            var previousToast;

            return toastr;

            ////////////////

            function error(message, title, optionsOverride) {
                return notify({
                    type: toastType.error,
                    iconClass: getOptions().iconClasses.error,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function getContainer(options, create) {
                if (!options) { options = getOptions(); }
                $container = $('#' + options.containerId);
                if ($container.length) {
                    return $container;
                }
                if (create) {
                    $container = createContainer(options);
                }
                return $container;
            }

            function info(message, title, optionsOverride) {
                return notify({
                    type: toastType.info,
                    iconClass: getOptions().iconClasses.info,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function subscribe(callback) {
                listener = callback;
            }

            function success(message, title, optionsOverride) {
                return notify({
                    type: toastType.success,
                    iconClass: getOptions().iconClasses.success,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function warning(message, title, optionsOverride) {
                return notify({
                    type: toastType.warning,
                    iconClass: getOptions().iconClasses.warning,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function clear($toastElement, clearOptions) {
                var options = getOptions();
                if (!$container) { getContainer(options); }
                if (!clearToast($toastElement, options, clearOptions)) {
                    clearContainer(options);
                }
            }

            function remove($toastElement) {
                var options = getOptions();
                if (!$container) { getContainer(options); }
                if ($toastElement && $(':focus', $toastElement).length === 0) {
                    removeToast($toastElement);
                    return;
                }
                if ($container.children().length) {
                    $container.remove();
                }
            }

            // internal functions

            function clearContainer (options) {
                var toastsToClear = $container.children();
                for (var i = toastsToClear.length - 1; i >= 0; i--) {
                    clearToast($(toastsToClear[i]), options);
                }
            }

            function clearToast ($toastElement, options, clearOptions) {
                var force = clearOptions && clearOptions.force ? clearOptions.force : false;
                if ($toastElement && (force || $(':focus', $toastElement).length === 0)) {
                    $toastElement[options.hideMethod]({
                        duration: options.hideDuration,
                        easing: options.hideEasing,
                        complete: function () { removeToast($toastElement); }
                    });
                    return true;
                }
                return false;
            }

            function createContainer(options) {
                $container = $('<div/>')
                    .attr('id', options.containerId)
                    .addClass(options.positionClass)
                    .attr('aria-live', 'polite')
                    .attr('role', 'alert');

                $container.appendTo($(options.target));
                return $container;
            }

            function getDefaults() {
                return {
                    tapToDismiss: true,
                    toastClass: 'toast',
                    containerId: 'toast-container',
                    debug: false,

                    showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery
                    showDuration: 300,
                    showEasing: 'swing', //swing and linear are built into jQuery
                    onShown: undefined,
                    hideMethod: 'fadeOut',
                    hideDuration: 1000,
                    hideEasing: 'swing',
                    onHidden: undefined,

                    extendedTimeOut: 1000,
                    iconClasses: {
                        error: 'toast-error',
                        info: 'toast-info',
                        success: 'toast-success',
                        warning: 'toast-warning'
                    },
                    iconClass: 'toast-info',
                    positionClass: 'toast-top-right',
                    timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky
                    titleClass: 'toast-title',
                    messageClass: 'toast-message',
                    target: 'body',
                    closeHtml: '<button type="button">&times;</button>',
                    newestOnTop: true,
                    preventDuplicates: false,
                    progressBar: false
                };
            }

            function publish(args) {
                if (!listener) { return; }
                listener(args);
            }

            function notify(map) {
                var options = getOptions();
                var iconClass = map.iconClass || options.iconClass;

                if (typeof (map.optionsOverride) !== 'undefined') {
                    options = $.extend(options, map.optionsOverride);
                    iconClass = map.optionsOverride.iconClass || iconClass;
                }

                if (shouldExit(options, map)) { return; }

                toastId++;

                $container = getContainer(options, true);

                var intervalId = null;
                var $toastElement = $('<div/>');
                var $titleElement = $('<div/>');
                var $messageElement = $('<div/>');
                var $progressElement = $('<div/>');
                var $closeElement = $(options.closeHtml);
                var progressBar = {
                    intervalId: null,
                    hideEta: null,
                    maxHideTime: null
                };
                var response = {
                    toastId: toastId,
                    state: 'visible',
                    startTime: new Date(),
                    options: options,
                    map: map
                };

                personalizeToast();

                displayToast();

                handleEvents();

                publish(response);

                if (options.debug && console) {
                    console.log(response);
                }

                return $toastElement;

                function personalizeToast() {
                    setIcon();
                    setTitle();
                    setMessage();
                    setCloseButton();
                    setProgressBar();
                    setSequence();
                }

                function handleEvents() {
                    $toastElement.hover(stickAround, delayedHideToast);
                    if (!options.onclick && options.tapToDismiss) {
                        $toastElement.click(hideToast);
                    }

                    if (options.closeButton && $closeElement) {
                        $closeElement.click(function (event) {
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {
                                event.cancelBubble = true;
                            }
                            hideToast(true);
                        });
                    }

                    if (options.onclick) {
                        $toastElement.click(function () {
                            options.onclick();
                            hideToast();
                        });
                    }
                }

                function displayToast() {
                    $toastElement.hide();

                    $toastElement[options.showMethod](
                        {duration: options.showDuration, easing: options.showEasing, complete: options.onShown}
                    );

                    if (options.timeOut > 0) {
                        intervalId = setTimeout(hideToast, options.timeOut);
                        progressBar.maxHideTime = parseFloat(options.timeOut);
                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                        if (options.progressBar) {
                            progressBar.intervalId = setInterval(updateProgress, 10);
                        }
                    }
                }

                function setIcon() {
                    if (map.iconClass) {
                        $toastElement.addClass(options.toastClass).addClass(iconClass);
                    }
                }

                function setSequence() {
                    if (options.newestOnTop) {
                        $container.prepend($toastElement);
                    } else {
                        $container.append($toastElement);
                    }
                }

                function setTitle() {
                    if (map.title) {
                        $titleElement.append(map.title).addClass(options.titleClass);
                        $toastElement.append($titleElement);
                    }
                }

                function setMessage() {
                    if (map.message) {
                        $messageElement.append(map.message).addClass(options.messageClass);
                        $toastElement.append($messageElement);
                    }
                }

                function setCloseButton() {
                    if (options.closeButton) {
                        $closeElement.addClass('toast-close-button').attr('role', 'button');
                        $toastElement.prepend($closeElement);
                    }
                }

                function setProgressBar() {
                    if (options.progressBar) {
                        $progressElement.addClass('toast-progress');
                        $toastElement.prepend($progressElement);
                    }
                }

                function shouldExit(options, map) {
                    if (options.preventDuplicates) {
                        if (map.message === previousToast) {
                            return true;
                        } else {
                            previousToast = map.message;
                        }
                    }
                    return false;
                }

                function hideToast(override) {
                    if ($(':focus', $toastElement).length && !override) {
                        return;
                    }
                    clearTimeout(progressBar.intervalId);
                    return $toastElement[options.hideMethod]({
                        duration: options.hideDuration,
                        easing: options.hideEasing,
                        complete: function () {
                            removeToast($toastElement);
                            if (options.onHidden && response.state !== 'hidden') {
                                options.onHidden();
                            }
                            response.state = 'hidden';
                            response.endTime = new Date();
                            publish(response);
                        }
                    });
                }

                function delayedHideToast() {
                    if (options.timeOut > 0 || options.extendedTimeOut > 0) {
                        intervalId = setTimeout(hideToast, options.extendedTimeOut);
                        progressBar.maxHideTime = parseFloat(options.extendedTimeOut);
                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                    }
                }

                function stickAround() {
                    clearTimeout(intervalId);
                    progressBar.hideEta = 0;
                    $toastElement.stop(true, true)[options.showMethod](
                        {duration: options.showDuration, easing: options.showEasing}
                    );
                }

                function updateProgress() {
                    var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;
                    $progressElement.width(percentage + '%');
                }
            }

            function getOptions() {
                return $.extend({}, getDefaults(), toastr.options);
            }

            function removeToast($toastElement) {
                if (!$container) { $container = getContainer(); }
                if ($toastElement.is(':visible')) {
                    return;
                }
                $toastElement.remove();
                $toastElement = null;
                if ($container.children().length === 0) {
                    $container.remove();
                    previousToast = undefined;
                }
            }

        })();
    });
}(typeof define === 'function' && define.amd ? define : function (deps, factory) {
    if (typeof module !== 'undefined' && module.exports) { //Node
        module.exports = factory(require('jquery'));
    } else {
        window['toastr'] = factory(window['jQuery']);
    }
}));
