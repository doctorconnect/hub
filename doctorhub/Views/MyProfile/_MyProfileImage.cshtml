@using doctorhubDataAccess;
@{
    int status = ((int)ViewBag.ImgStatus);
    
}

@if (status == Convert.ToInt32(0))
{
    <div class="profile-userpic">
        <img id="myImg" src="@ViewBag.Base64String" class="img-thumbnail img-circle" alt="">
        <span id="imgBtn"><i class="fa fa-edit" style="color:#fff; padding-top:4px;">Approved</i></span>
    </div>
}
@if (status == Convert.ToInt32(1))
{
    <div class="profile-userpic id=" mask"">
        <img id="myImg" src="@ViewBag.Base64String" class="img-thumbnail img-circle" alt="">
        <span id="imgBtn"><i class="fa fa-edit" style="color:#fff; padding-top:4px;">Pending</i></span>
    </div>
}

@if (status == Convert.ToInt32(2))
{
    <div class="profile-userpic id=" mask"">
        <img id="myImg" src="@ViewBag.Base64String" class="img-thumbnail img-circle" alt="">
        <span id="imgBtn"><i class="fa fa-edit" style="color:#fff; padding-top:4px;">Reject</i></span>
    </div>
}
@using (Html.BeginForm("UpdateProfileImg", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="modal fade" id="myModal1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="myModalLabel" style="color:purple">Re-Upload Image</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-6">
                            <div align="center">
                                <img id="blah" src="@ViewBag.Base64String" alt="your image" class="img-thumbnail img-circle" style="width:100px" />
                            </div>
                        </div>
                        <div class="col-sm-12">

                            @*@Html.LabelFor(model => model.UserPhoto, new { @class = "form-control" })*@
                            <div class="input-group input-file">
                                <div class="form-control">
                                    <a href="" target="_blank">Click On Browse Button And Select File Path</a>
                                </div>
                                <span class="input-group-addon">
                                    <a class='btn btn-primary' href='javascript:;'>
                                        Browse
                                        <input type="file" name="UserPhoto" id="fileUpload" onchange="$(this).parent().parent().parent().find('.form-control').html($(this).val());">
                                    </a>
                                </span>
                            </div>
                            @*<input type="file" name="UserPhoto" id="fileUpload" />*@
                            <div class="col-sm-10">
                                <span id="errorProfileImageSpan" style="display: none; color: red">Please Upload profile image.</span>
                                <span id="errorProfileImageLength" style="display: none; color: red">Image size should not be more than 2 MB.</span>
                                <span id="errorProfileImageExtension" style="display: none; color: red">Please upload only .jpeg .png extension image.</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Upload</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
<script>
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#blah').attr('src', e.target.result);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    $("#fileupload").change(function () {
        readurl(this);
    });

    $(function () {
        $("#imgDIv").mouseenter(function () { $("#imgBtn").show(); }).mouseleave(function () { $("#imgBtn").hide(); });
    });

    $(document).ready(function () {
        $("#imgBtn").click(function () {
            $('#myModal1').modal('show');
        });
    });

    $('#fileUpload').bind('change', function () {
        $('#errorProfileImageLength').hide();
        $('#errorProfileImageExtension').hide();

        var fileExt = $('#fileUpload').val().split('.').pop().toLowerCase();
        if ($.inArray(fileExt, ['jpeg', 'jpg', 'png']) === -1) {
            $('#errorProfileImageExtension').show();
            return false;
        }

        if (this.files[0].size / (1024 * 1024) > 2) {
            $('#errorProfileImageLength').show();
            return false;
        }
    });

    var modal = document.getElementById('myModal2');
    var img = document.getElementById('myImg');
    var modalImg = document.getElementById("img01");
    var captionText = document.getElementById("caption");

    img.onclick = function () {
        modal.style.display = "block";
        modalImg.src = this.src;
        captionText.innerHTML = this.alt;
    }

    var span = document.getElementsByClassName("close")[0];

    span.onclick = function () {
        modal.style.display = "none";
    }
</script>


