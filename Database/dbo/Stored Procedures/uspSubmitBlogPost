
CREATE  PROCEDURE [dbo].[uspSubmitBlogPost]  
(   
 @BlogId INT, 
 @CapId int ,                            
 @BlogBy INT,
 @CreatedBy VARCHAR(50),
 @Title VARCHAR(50),
 @Message VARCHAR(MAX),
 @BlogDate DATETIME ,
 @Points INT                               
)                                                      
AS                                                      
BEGIN        
    BEGIN TRANSACTION;      
      SAVE TRANSACTION MySavePoint;  
	  DEClARE @UserName VARCHAR(50) = NULL,
	  @UserCode VARCHAR(50) = NULL
	  
	   SET @UserName = (SELECT UserName FROM KMTUserRegistration WHERE Id = @BlogBy)
	   SET @UserCode = (SELECT UserCode FROM KMTUserRegistration WHERE Id = @BlogBy)

       BEGIN TRY   
	    IF(@BlogId=0) 
	      BEGIN               
            INSERT INTO Blogs (BlogBy,Title,[Message], BlogDate,CreatedBy,CapId)VALUES (@BlogBy,@Title,@Message,@BlogDate,@CreatedBy,@CapId) ;
	        INSERT INTO KMTPointEarnSystem (Points,Pes_Id, Pes_type,Pes_by,Pes_On)VALUES (@Points,@BlogId,'UploadBlog',@CreatedBy,GETDATE());
			INSERT INTO KMTNotification(RoleId,UserCode,IsAdminFlag,IsUserFlag,IsFacilitatorFlag,Identifier,AdminDescripation,UserDescripation,CreatedOn) 
			VALUES('1,10,12',@UserCode,0,0,0,'BlogCreated','<b>' + @UserName + '</b> has created blog <b>' + @Title + '</b>','Your blog <b>' + @Title + '</b> has been created successfully',@BlogDate);
		 END
		 ELSE IF(@BlogId>0) 
			BEGIN 
			  UPDATE Blogs SET Message=@Message ,Title=@Title WHERE Id=@BlogId
			  INSERT INTO KMTNotification(RoleId,UserCode,IsAdminFlag,IsUserFlag,IsFacilitatorFlag,Identifier,AdminDescripation,UserDescripation,CreatedOn) 
			  VALUES('1,10,12',@UserCode,0,0,0,'BlogUpdated','<b>' + @UserName + '</b> has updated blog <b>' + @Title + '</b>.','Your blog <b>' + @Title + '</b> has been updated successfully',@BlogDate);
			END            			                    
       END TRY       
       BEGIN CATCH      
         IF @@TRANCOUNT > 0      
          BEGIN      
            ROLLBACK TRANSACTION MySavePoint;       
          END      
         END CATCH                                                 
     COMMIT TRANSACTION                                                  
END
GO
